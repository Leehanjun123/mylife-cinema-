version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: mylife_cinema_db
    environment:
      POSTGRES_DB: mylife_cinema
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres123}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./database/seed.sql:/docker-entrypoint-initdb.d/02-seed.sql
    ports:
      - "5432:5432"
    networks:
      - mylife_cinema_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: mylife_cinema_redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis123} --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - mylife_cinema_network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-redis123}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API Server
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
      target: ${NODE_ENV:-development}
    container_name: mylife_cinema_api
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=8000
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-postgres123}@postgres:5432/mylife_cinema
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis123}@redis:6379
      - JWT_SECRET=${JWT_SECRET:-your_jwt_secret_here}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - RUNWAY_API_KEY=${RUNWAY_API_KEY}
      - PIKA_API_KEY=${PIKA_API_KEY}
      - STABLE_VIDEO_API_KEY=${STABLE_VIDEO_API_KEY}
      - ELEVENLABS_API_KEY=${ELEVENLABS_API_KEY}
      - MUBERT_PAT=${MUBERT_PAT}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - S3_BUCKET=${S3_BUCKET:-mylife-cinema-dev}
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:3000}
    volumes:
      - ./src:/app/src
      - ./package.json:/app/package.json
      - ./package-lock.json:/app/package-lock.json
      - temp_storage:/app/temp
      - output_storage:/app/output
      - logs:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - mylife_cinema_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Frontend React App
  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile
      target: ${NODE_ENV:-development}
    container_name: mylife_cinema_frontend
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - REACT_APP_API_URL=${REACT_APP_API_URL:-http://localhost:8000/api}
      - REACT_APP_SOCKET_URL=${REACT_APP_SOCKET_URL:-http://localhost:8000}
      - REACT_APP_STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY}
    volumes:
      - ./client/src:/app/src
      - ./client/public:/app/public
      - ./client/package.json:/app/package.json
    ports:
      - "3000:3000"
    depends_on:
      - api
    networks:
      - mylife_cinema_network
    restart: unless-stopped

  # Background Job Worker
  worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    container_name: mylife_cinema_worker
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-postgres123}@postgres:5432/mylife_cinema
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis123}@redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - RUNWAY_API_KEY=${RUNWAY_API_KEY}
      - PIKA_API_KEY=${PIKA_API_KEY}
      - STABLE_VIDEO_API_KEY=${STABLE_VIDEO_API_KEY}
      - ELEVENLABS_API_KEY=${ELEVENLABS_API_KEY}
      - MUBERT_PAT=${MUBERT_PAT}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - S3_BUCKET=${S3_BUCKET:-mylife-cinema-dev}
    volumes:
      - temp_storage:/app/temp
      - output_storage:/app/output
      - logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - mylife_cinema_network
    restart: unless-stopped

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: mylife_cinema_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/ssl
      - nginx_logs:/var/log/nginx
    depends_on:
      - api
      - frontend
    networks:
      - mylife_cinema_network
    profiles:
      - production
    restart: unless-stopped

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: mylife_cinema_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - mylife_cinema_network
    profiles:
      - monitoring
    restart: unless-stopped

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: mylife_cinema_grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - mylife_cinema_network
    profiles:
      - monitoring
    restart: unless-stopped

  # Log Management - ELK Stack (Optional)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.7.0
    container_name: mylife_cinema_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - mylife_cinema_network
    profiles:
      - logging
    restart: unless-stopped

  logstash:
    image: docker.elastic.co/logstash/logstash:8.7.0
    container_name: mylife_cinema_logstash
    volumes:
      - ./logging/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
      - logs:/var/log/app
    depends_on:
      - elasticsearch
    networks:
      - mylife_cinema_network
    profiles:
      - logging
    restart: unless-stopped

  kibana:
    image: docker.elastic.co/kibana/kibana:8.7.0
    container_name: mylife_cinema_kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - mylife_cinema_network
    profiles:
      - logging
    restart: unless-stopped

networks:
  mylife_cinema_network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  temp_storage:
    driver: local
  output_storage:
    driver: local
  logs:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local